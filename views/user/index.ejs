<% layout("layout/boilerplate.ejs") %>

   <body>
    <div class="chat-container">
        
        <div class="side-nav">
            <div class="upperSide">
                <div class="upperSideTop">
                <img src="asset/icons8-chatgpt.svg" alt="" class="logo">
                <span class="brand">multyGPT</span></img>
                  
                  <button class="midbtn">
                    <img src="asset/bookmark.svg" alt="" class="addbtn" onclick=newChat() />
                    New Chat
                  </button>
                </div>
                <div class="upperSideBottom">
                  <button class="query">
                    <img src="asset/message copy.svg" alt="Query" />
                    What is Programming?
                  </button>
                  <button class="query">
                    <img src="asset/message copy.svg" alt="Query" />
                    How to use an API?
                  </button>
                </div>
              </div>

              <div class="lowerSide"></div>
        </div>
        <main class="main-content">
            <%- include("../includes/navbar.ejs") %>
           <div class="chat-section">
               <h1>ai chat bot </h1>
               <div class="ai-chat-box">
                   <img src="asset/icons8-chatgpt.svg" alt="" id="ai-image" class="ai-image" width="40">
                   <div class="ai-chat-area">
                       hello! how can i help you.
                   </div>
                </div>
           </div>
           
            <div class="promt-area">
                <div class="compare-switch">
                    <div class="form-check form-switch">
                      <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault">
                      <label class="form-check-label" for="flexSwitchCheckDefault"></label>
                    </div>
                </div>
              <div class="testinput">
               <input type="text" id="promt" class="user-input" placeholder="Type a message...">
                 <button id="image" ><img src="img/img.svg" alt="" >
                  <input type="file" accept="image/*" hidden>
                 </button>
             
                <button type="submit" id="submit" ><img src="asset/send.svg" alt=""></button>
            </div>
            </div>
       </main>
      
    </div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
const promt = document.querySelector("#promt")
const userInput = document.querySelector(".user-input")
const chatContainer = document.querySelector(".chat-container")
const mainContent = document.querySelector(".main-content")
const chatSection = document.querySelector(".chat-section")
const imageButton = document.querySelector("#image")
const imgbtn = document.querySelector("#image img")
const imgbtnInput = document.querySelector("#image input")
const submitImg = document.getElementById("submit")
const lowerSide = document.querySelector(".lowerSide")
const midbtn = document.querySelector(".midbtn")
const toggle = document.getElementById('flexSwitchCheckDefault');

const API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent";
const API_KEY = "AIzaSyDoCP_bZiOK5M5wTzHcslBbssYmhHLmuOU"; 

const imgsrc = imgbtn.src
let chatSessionId = null;
let chatTitle = null;
let aiResponse = [];
let currentChat = '';

const sessionId = "<%= sessionId %>";
console.log("Session ID:", sessionId);

let user = {
    message: null,
    file:{
        mime_type:null,
        data: null,
    },
    previousChat: null,
    title: null
};
chathistoryPreviw()

function getChatHistory(item) {
    const id = item.getAttribute("data-id");
    if (!id) return; // Check if id is valid
    window.location.href = `/chat-history/1d376b64-0fcb-4981-afbd-b1e8c2dabfd3`;
}
async function deleteChatHistory(item) {
    const id = item.getAttribute("data-id");

    const confirmDelete = confirm("Are you sure you want to delete this chat?");
    if (!confirmDelete) {
        return; // Stop if user cancels
    }

    const response = await fetch(`/chat-history/delete/${id}`, {
        method: 'DELETE'
    });

    const data = await response.json();
    if (data.success) {
        alert(data.message);
        chathistoryPreviw(); // Refresh the chat history list
    } else {
        alert("Failed to delete chat.");
    }
}


async function newChat(){
        chatSection.innerHTML = ""
        user.previousChat = null
        user.message = null
        user.title = null
        user.file = {
            mime_type: null,
            data: null
        }
        promt.value = ""
        imgbtn.src = imgsrc

        chatSection.innerHTML = `<h1>ai chat bot </h1>
        <div class="ai-chat-box">
            <img src="icons/robot-chatbot-icon-sign-free-vector.jpg" alt="" id="ai-image" class="ai-image" width="50">
            <div class="ai-chat-area">
                hello! how can i help you.
            </div>
         </div>`
    
    const newChatId = await getNewChatId();
    console.log(newChatId)
}

async function getNewChatId() {
    try {
        const response = await fetch("/api/newchat", {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
            },
        });

        const data = await response.json();
        if (data) {
            console.log(data.chatSessionId)
            return data.chatSessionId;
        } else {
            console.error("Failed to fetch new chat id:", data.message);
        }
    } catch (error) {
        console.error("Error in fetch new chat id:", error);
    }
}

async function chathistoryPreviw() {
    try {
        const chathistory = await chatHistory();
        lowerSide.innerHTML = ''
        chathistory.forEach(chat => {
            if(chat.chats.length === 0) return
            const item = document.createElement('div');
            item.className = 'listItems';
            item.setAttribute('data-id', chat.chatSessionId);

            const img = document.createElement('img');
            img.className = 'listItemImg';
            img.src = "asset/icons8-history-30.png";
            item.appendChild(img);

            const span = document.createElement('span');
            span.textContent = chat.chats.length > 0 ? chat.chats[0].title : "No chat available";
            item.appendChild(span);

            const deletIcon = document.createElement('img');
            deletIcon.className = 'listItemImg deleteIcon';
            deletIcon.src = "asset/icons8-delete.svg";
            item.appendChild(deletIcon);

            span.onclick = () => getChatHistory(item); 
            deletIcon.onclick =() => deleteChatHistory(item);

            lowerSide.appendChild(item)
        });
    } catch (error) {
        console.error('Error loading history:', error);
    }
}

async function getOpenAiResponse(context, message, isTitle) {
    try {
        const resp = await fetch("/api/openai", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ context, message, isTitle }),
        });

        if (!resp.ok) {
            throw new Error(`HTTP Error: ${resp.status}`);
        }

        let data = await resp.json();

        if (data.response) {
            user.file = { data: null, mime_type: null };
            return data.response;
        } else {
            return data.error || "Unknown error occurred.";
        }
    } catch (error) {
        console.error("OpenAI API Error:", error.message);
        return "Error fetching response from OpenAI.";
    }
}
async function getDeepSeekResponse(context, message, isTitle) {
    try {
        const resp = await fetch("/api/deepseek", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ context, message, isTitle }),
        });

        if (!resp.ok) {
            throw new Error(`HTTP Error: ${resp.status}`);
        }

        let data = await resp.json();
        console.log(data)
        if (data.result) {
            user.file = { data: null, mime_type: null };
            console.log(data)
            return data.result;
        } else {
            return data.error || "Unknown error occurred.";
        }
    } catch (error) {
        console.error("deepSeek API Error:", error.message);
        return "Error fetching response from OpenAI.";
    }
}
async function getGiminiResponse(context, message, isTitle) {
    try {
       const resp = await fetch("/api/gimini", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({
            context,
            message,
            isTitle,
            user
        }),
    });
        const data = await resp.json(); 
        const aidata = data.response.candidates[0].content.parts[0].text
        user.file.data = null;
        user.file.mime_type = null;

        return aidata;
    } catch (error) {
        return error.message
    }
}

async function responseChatBox(aiChatBox, response, model) {
    const text = aiChatBox.querySelector(".ai-chat-area"); // Select existing chat area

    if (!text) {
        console.error(`Chat area not found for ${model}`);
        return;
    }

    text.innerHTML = ""; // Clear loading animation

    // Add model name heading
    const heading = document.createElement("h4");
    heading.textContent = model;
    text.appendChild(heading);

    // Add AI response
    const responseDiv = document.createElement("div");
    responseDiv.innerHTML = response;
    text.appendChild(responseDiv);

    // Auto-scroll to bottom
    chatContainer.scrollTo({ top: chatContainer.scrollHeight, behavior: "smooth" });
}
function createChatBox(html, classes){

    let Box = document.createElement("div")
    Box.innerHTML = html
    Box.classList.add(classes)
    return Box
};

async function handleChatResponse(message) {
    try {
        
        let models = document.getElementById("dropdown-menu").querySelectorAll("input");
        const contextChats = await chatHistory();

        // Generate chat context
        let fullChat = contextChats.slice(-3).map(chatSet =>
            chatSet.chats.map(chat => `User: ${chat.message}\nai: ${chat.response}\n\n`).join("")
        ).join("");

        if (fullChat) {
            fullChat += `# This is for context # Read all user and AI chat history, make 
            relationships between them, and respond considering the current user as the previous user.\n`;
        }

        user.previousChat = fullChat || "";
        user.message = message;

        let userHtml = `
            <div class="user-chat-area">
                ${message}
                ${user.file?.data ? `<img src="data:${user.file.mime_type};base64,${user.file.data}" class="choosingImg" />` : ""}
            </div>`;

        promt.value = "";
        let userChatBox = createChatBox(userHtml, "user-chat-box");
        chatSection.appendChild(userChatBox);

        setTimeout(async () => {
            let responses = {};

            const loadingHtml = (modelName) => `
                <div class="ai-chat-area">
                    <h4>${modelName}</h4>
                    <img src="animation/Animation - 1737272179442.gif" alt="loading img">
                </div>`;

            let chatBoxes = {};
            imgbtn.src = imgsrc
            let aidata, openai, deepSeek;
            if(models[0].checked && models[1].checked || 
            models[0].checked && models[2].checked || 
            models[1].checked && models[2].checked )
            {
               toggle.style.display = "block"
            }
            if(!toggle.checked){
            // Create chat boxes for selected models with loading indicators
            if (models[0]?.checked) {
                chatBoxes["Gemini"] = createChatBox(loadingHtml("Gemini"), "ai-chat-box");
                chatSection.appendChild(chatBoxes["Gemini"]);
            }
            if (models[1]?.checked) {
                chatBoxes["OpenAI"] = createChatBox(loadingHtml("OpenAI"), "ai-chat-box");
                chatSection.appendChild(chatBoxes["OpenAI"]);
            }
            if (models[2]?.checked) {
                chatBoxes["DeepSeek"] = createChatBox(loadingHtml("DeepSeek"), "ai-chat-box");
                chatSection.appendChild(chatBoxes["DeepSeek"]);
            }

            // Fetch responses from selected models
            [aidata, openai, deepSeek] = await Promise.all([
                models[0].checked ? getGiminiResponse(fullChat, message, false) : null,
                models[1].checked ? getOpenAiResponse(fullChat, message, false) : null,
                models[2].checked ? getDeepSeekResponse(fullChat, message, false) : null
            ]);

            // Update chat boxes with responses
            if (aidata) {
                responseChatBox(chatBoxes["Gemini"], formatResponseToHTML(aidata), 'Gimini');
                if (!user.title) user.title = await getGiminiResponse(null, aidata, true);
                console.log(user.title)
            }
            if (openai) {
                responseChatBox(chatBoxes["OpenAI"], formatResponseToHTML(openai), 'ChatGPT');
                if (!user.title) user.title = await getOpenAiResponse(null, openai, true);
            }
            if (deepSeek) {
                responseChatBox(chatBoxes["DeepSeek"], formatResponseToHTML(deepSeek), 'deepSeek');
                console.log(deepSeek)
                if (!user.title) user.title = await getDeepSeekResponse(null, deepSeek, true);
            }
            currentChat = `promt:${user.message}\nreponses\nGimini:${aidata?aidata:null}\nopenai: ${openai?openai:null}\ndeepSeek: ${deepSeek?deepSeek:null}`;
            }
            else{
                let comparePrompt = `compare this different ai responses in context based on`;
                userInput.ariaPlaceholder = "compare this different ai responses based on...";
                console.log("Switch is ON");

                if (models[0].checked) {
                    const compareMessage = `${comparePrompt} ${message}`;
                    console.log(compareMessage);
                    console.log(currentChat);

                    // Create and append chatbox with loading first
                    chatBoxes["Gemini"] = createChatBox(loadingHtml("Gemini"), "ai-chat-box");
                    chatSection.appendChild(chatBoxes["Gemini"]);

                    // Await response
                    const aidataCompare = await getGiminiResponse(currentChat, compareMessage, false);
                    console.log(aidataCompare);

                    // Show response in UI
                    responseChatBox(chatBoxes["Gemini"], formatResponseToHTML(aidataCompare), 'Gemini');

                } else if (models[1].checked) {
                    chatBoxes["OpenAI"] = createChatBox(loadingHtml("OpenAI"), "ai-chat-box");
                    chatSection.appendChild(chatBoxes["OpenAI"]);

                    const openaiCompare = await getOpenAiResponse(currentChat, `${comparePrompt} ${message}`, false);
                    console.log(openaiCompare);
                    responseChatBox(chatBoxes["OpenAI"], formatResponseToHTML(openaiCompare), 'ChatGPT');

                } else if (models[2].checked) {
                    chatBoxes["DeepSeek"] = createChatBox(loadingHtml("DeepSeek"), "ai-chat-box");
                    chatSection.appendChild(chatBoxes["DeepSeek"]);

                    const deepSeekCompare = await getDeepSeekResponse(currentChat, `${comparePrompt} ${message}`, false);
                    console.log(deepSeekCompare);
                    responseChatBox(chatBoxes["DeepSeek"], formatResponseToHTML(deepSeekCompare), 'DeepSeek');
                }
            }
            // let comparePrompt = `compare this different ai responses based on`;
            // userInput.ariaPlaceholder = "compare this different ai responses based on..."
            // console.log("Switch is ON");

            // if (models[0].checked) {
            //     let mess = `${comparePrompt} ${message}`;
            //     console.log(mess);
            //     console.log(currentChat);
            //     let aidataCompare = getGiminiResponse(`${currentChat}`, `${comparePrompt} ${message}`, false);
            //     console.log(aidataCompare);
            //     chatBoxes["Gemini"] = createChatBox(loadingHtml("Gemini"), "ai-chat-box");
            //     chatSection.appendChild(chatBoxes["Gemini"]);
            //     responseChatBox(chatBoxes["Gemini"], aidataCompare, 'Gimini');
            //     // console.log(aidataCompare);
            //     // console.log(aidataCompare.Promise.PromiseResult);
            // }
            // else if (models[1].checked) {
            //     let openaiCompare = getOpenAiResponse(currentChat, `${comparePrompt} ${message}`, false);
            //     console.log(openaiCompare);
            // }
            // else if (models[2].checked) {
            //     let deepSeekCompare = getDeepSeekResponse(currentChat, `${comparePrompt} ${message}`, false);
            //     console.log(deepSeekCompare);
            // }
            // }
            // Save chat
            const userId = "<%= userdata.userId %>";
            const username = "<%= userdata.username %>";
            let aiResponse = [aidata, openai, deepSeek];
            await saveChat(userId, username, user.message, aiResponse, user.title);

        }, 600);
    } catch (err) {
        console.error(err);
    }
}

window.addEventListener("beforeunload", async () => {
  await fetch("/api/end-session", { method: "POST", credentials: "include" });
});
window.onload = function() {
    document.querySelector('.lowerSide').scrollTop = 0;
};
midbtn.addEventListener("click", ()=>{
    newChat()
})

promt.addEventListener("keydown", (mess) =>{
    if(mess.key == "Enter"){
        if(!promt.value) return
       
        handleChatResponse(promt.value)
        imgChangClass("submit")
    }
});

imageButton.addEventListener("click", () =>{
    imageButton.querySelector("input").click()
})

submitImg.addEventListener("click", ()=>{
    if(!promt.value) return
    handleChatResponse(promt.value)
    imgChangClass("submit")
})
imgbtnInput.addEventListener("change", ()=>{
    const file = imgbtnInput.files[0]
   if(!file) return
   let reader = new FileReader()
   reader.onload = (e)=>{
    // console.log(e)
    let base64String = e.target.result.split(",")[1]
    user.file={
        mime_type:file.type,
        data: base64String
    }
    imgbtn.src = `data:${user.file.mime_type};base64,${user.file.data}`
    imgChangClass("upload")
    
   }
   reader.readAsDataURL(file)
})

function imgChangClass(action) {
    if (action === "upload") {
        imgbtn.classList.remove("xchoose");
        imgbtn.classList.add("xchoosebtn");
    } else if (action === "submit") {
        imgbtn.classList.remove("xchoosebtn");
        imgbtn.classList.add("xchoose");
    }
}
async function saveChat(userId, username, userMessage, aiResponse, title) {
    //console.log(chatSessionId)
    try {
        const response = await fetch("/api/req", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                userId,
                username,
                userMessage,
                aiResponse,
                title,
            }),
        });

        if (!response.ok) {
            throw new Error(`HTTP Error! Status: ${response.status}`);
        }

        const data = await response.json();
        if (data.success) {
            //console.log("Chat saved successfully chatId:", data.chatId);
            return data.chatId;
        } else {
            console.error("Failed to save chat:", data.message);
            return null;
        }
    } catch (error) {
        console.error("Error in saveChat:", error);
        return null;
    }
}
async function chatHistory(){
    try {
        const response = await fetch("/api/chat", {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
            },
        });

        const data = await response.json();
        if (data) {
            return data
        } else {
            console.error("Failed to fetch chats:", data.message);
        }
    } catch (error) {
        console.error("Error in fetch chats:", error);
    }
}

function formatResponseToHTML(apiResponse) {
    const lines = apiResponse.split('\n');
    let htmlContent = [];
    let inList = false;
    let inCodeBlock = false;
    let codeLanguage = '';
    let codeLines = [];

    // Escape HTML characters to prevent XSS
    const escapeHtml = (unsafe) => {
        return unsafe.replace(/[&<>"']/g, (match) => ({
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
        }[match]));
    };

    // Process bold markers (**text**) in any text
    const processBold = (text) => {
        return text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    };

    const flushCodeBlock = () => {
        if (codeLines.length > 0) {
            const escapedCode = codeLines.map(line => escapeHtml(line)).join('\n');
            htmlContent.push(`
                <div class="code-container">
                    <div class="code-header">
                        <span class="code-language">${codeLanguage || 'code'}</span>
                        <button class="copy-button" onclick="copyCode(this)" title="Copy code">
                            <svg class="copy-icon" viewBox="0 0 24 24" width="16" height="16">
                                <path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"/>
                            </svg>
                        </button>
                    </div>
                    <div class="code-content">
                        <pre><code class="language-${codeLanguage}">${escapedCode}</code></pre>
                    </div>
                </div>
            `);
            codeLines = [];
        }
    };

    lines.forEach(line => {
        line = line.trim();

        // Handle code blocks
        if (line.startsWith('```')) {
            if (inCodeBlock) {
                flushCodeBlock();
                inCodeBlock = false;
            } else {
                inCodeBlock = true;
                codeLanguage = line.replace(/```/, '').trim();
            }
            return;
        }

        if (inCodeBlock) {
            codeLines.push(line);
            return;
        }

        // Skip empty lines
        if (line === '') {
            // Close any open list before a blank line
            if (inList) {
                htmlContent.push('</ul>');
                inList = false;
            }
            return;
        }

        // Handle headings enclosed in ***
        if (line.startsWith('***') && line.endsWith('***')) {
            if (inList) {
                htmlContent.push('</ul>');
                inList = false;
            }
            let text = line.replace(/\*\*\*/g, '').trim();
            htmlContent.push(`<h3>${processBold(text)}</h3>`);
            return;
        }

        // Handle ### headings (single or double side)
        if (/^#{1,3}\s/.test(line) || /\s#{1,3}$/.test(line)) {
            if (inList) {
                htmlContent.push('</ul>');
                inList = false;
            }
            
            // Determine heading level based on # count (max h3 for ###)
            const match = line.match(/^(#+)/);
            const level = Math.min(match ? match[1].length : 3, 3);
            
            // Clean the heading text
            let text = line.replace(/^#+\s*|\s*#+$/g, '').trim();
            htmlContent.push(`<h${level}>${processBold(text)}</h${level}>`);
            return;
        }

        // Handle list items (* or - at start)
        if (line.startsWith('* ') || line.startsWith('- ')) {
            if (!inList) {
                htmlContent.push('<ul>');
                inList = true;
            }
            let text = line.replace(/^\*\s|^-\s/, '').trim();
            htmlContent.push(`<li>${processBold(text)}</li>`);
            return;
        }
          
        // Close the list if a non-list item appears
        if (inList) {
            htmlContent.push('</ul>');
            inList = false;
        }

        // Process regular paragraphs with bold text
        htmlContent.push(`<p>${processBold(line)}</p>`);
    });

    // Close any open list at the end
    if (inList) {
        htmlContent.push('</ul>');
    }

    // Ensure any open code block is flushed
    if (inCodeBlock) flushCodeBlock();

    return `<div class="api-response">${htmlContent.join('\n')}</div>`;
}
// Helper function to copy code to clipboard
function copyCode(button) {
    const code = button.closest('.code-container').querySelector('code').innerText;
    navigator.clipboard.writeText(code).then(() => {
        button.classList.add('copied');
        setTimeout(() => button.classList.remove('copied'), 2000);
    });
}

    </script>
    
